"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var https = require("https");
var mkdirp = require("mkdirp");
var colors = require("colors");
var sprequest = require("sp-request");
var request = require("request");
var node_sp_auth_1 = require("node-sp-auth");
var utils_1 = require("./../utils");
var RestAPI = (function () {
    function RestAPI(context, options) {
        var _this = this;
        this.downloadFile = function (spFilePath, metadata) {
            return new Promise(function (resolve, reject) {
                _this.spr = _this.getCachedRequest();
                var spBaseFolderRegEx = new RegExp(decodeURIComponent(_this.options.spBaseFolder), 'gi');
                var spFilePathRelative = decodeURIComponent(spFilePath);
                if (['', '/'].indexOf(_this.options.spBaseFolder) === -1) {
                    spFilePathRelative = decodeURIComponent(spFilePath).replace(spBaseFolderRegEx, '');
                }
                var saveFilePath = path.join(_this.options.dlRootFolder, spFilePathRelative);
                if (typeof _this.options.omitFolderPath !== 'undefined') {
                    var omitFolderPath = path.resolve(_this.options.omitFolderPath);
                    saveFilePath = path.join(saveFilePath.replace(_this.options.omitFolderPath, ''));
                }
                if (_this.needToDownload(saveFilePath, metadata)) {
                    var saveFolderPath = path.dirname(saveFilePath);
                    mkdirp(saveFolderPath, function (err) {
                        if (err) {
                            console.log(colors.red.bold('\nError in operations.downloadFile:'), colors.red(err));
                            return reject(err);
                        }
                        var filesize = parseInt(metadata.Length + '');
                        if (filesize > 20000000) {
                            _this.downloadAsStream(spFilePath, saveFilePath)
                                .then(function () {
                                resolve(saveFilePath);
                            })
                                .catch(function (error) {
                                console.log(colors.red.bold('\nError in operations.downloadFile:'), colors.red(err.message));
                                reject(error);
                            });
                        }
                        else {
                            _this.downloadSimple(spFilePath, saveFilePath)
                                .then(function () {
                                resolve(saveFilePath);
                            })
                                .catch(function (error) {
                                console.log(colors.red.bold('\nError in operations.downloadFile:'), colors.red(err.message));
                                reject(error);
                            });
                        }
                    });
                }
                else {
                    resolve(saveFilePath);
                }
            });
        };
        this.getFolderContent = function (spRootFolder) {
            return new Promise(function (resolve, reject) {
                var restUrl;
                _this.spr = _this.getCachedRequest();
                if (spRootFolder.charAt(spRootFolder.length - 1) === '/') {
                    spRootFolder = spRootFolder.substring(0, spRootFolder.length - 1);
                }
                restUrl = _this.utils.trimMultiline("\n        " + _this.context.siteUrl + "/_api/Web/GetFolderByServerRelativeUrl(@FolderServerRelativeUrl)\n          ?$expand=Folders,Files,Folders/ListItemAllFields,Files/ListItemAllFields\n          &$select=##MetadataSrt#\n            Folders/ListItemAllFields/Id,\n            Folders/Name,Folders/UniqueID,Folders/ID,Folders/ItemCount,Folders/ServerRelativeUrl,Folder/TimeCreated,Folder/TimeLastModified,\n            Files/Name,Files/UniqueID,Files/ID,Files/ServerRelativeUrl,Files/Length,Files/TimeCreated,Files/TimeLastModified,Files/ModifiedBy\n          &@FolderServerRelativeUrl='" + _this.utils.escapeURIComponent(spRootFolder) + "'\n      ");
                var metadataStr = _this.options.metaFields.map(function (fieldName) {
                    return 'Files/ListItemAllFields/' + fieldName;
                }).join(',');
                if (metadataStr.length > 0) {
                    metadataStr += ',';
                }
                restUrl = restUrl.replace(/##MetadataSrt#/g, metadataStr);
                _this.spr.get(restUrl, {
                    agent: _this.utils.isUrlHttps(restUrl) ? _this.agent : undefined
                })
                    .then(function (response) {
                    var results = {
                        folders: (response.body.d.Folders.results || []).filter(function (folder) {
                            return typeof folder.ListItemAllFields.Id !== 'undefined';
                        }),
                        files: (response.body.d.Files.results || []).map(function (file) {
                            return __assign({}, file, { metadata: _this.options.metaFields.reduce(function (meta, field) {
                                    if (typeof file.ListItemAllFields !== 'undefined') {
                                        if (file.ListItemAllFields.hasOwnProperty(field)) {
                                            meta[field] = file.ListItemAllFields[field];
                                        }
                                    }
                                    return meta;
                                }, {}) });
                        })
                    };
                    resolve(results);
                })
                    .catch(function (err) {
                    console.log(colors.red.bold('\nError in getFolderContent:'), colors.red(err.message));
                    reject(err.message);
                });
            });
        };
        this.getContentWithCaml = function () {
            return new Promise(function (resolve, reject) {
                _this.spr = _this.getCachedRequest();
                _this.spr.requestDigest(_this.context.siteUrl)
                    .then(function (digest) {
                    var restUrl;
                    restUrl = _this.utils.trimMultiline("\n            " + _this.context.siteUrl + "/_api/Web/GetList(@DocLibUrl)/GetItems\n              ?$select=##MetadataSrt#\n                Name,UniqueID,ID,FileDirRef,FileRef,FSObjType,TimeCreated,TimeLastModified,Length,ModifiedBy\n              &@DocLibUrl='" + _this.utils.escapeURIComponent(_this.options.spDocLibUrl) + "'\n          ");
                    var metadataStr = _this.options.metaFields.map(function (fieldName) {
                        return "Files/ListItemAllFields/" + fieldName;
                    }).join(',');
                    if (metadataStr.length > 0) {
                        metadataStr += ',';
                    }
                    restUrl = restUrl.replace(/##MetadataSrt#/g, metadataStr);
                    return _this.spr.post(restUrl, {
                        body: {
                            query: {
                                __metadata: {
                                    type: 'SP.CamlQuery'
                                },
                                ViewXml: "<View Scope=\"Recursive\"><Query><Where>" + _this.options.camlCondition + "</Where></Query></View>"
                            }
                        },
                        headers: {
                            'X-RequestDigest': digest,
                            'Accept': 'application/json; odata=verbose',
                            'Content-Type': 'application/json; odata=verbose'
                        },
                        agent: _this.utils.isUrlHttps(restUrl) ? _this.agent : undefined
                    });
                })
                    .then(function (response) {
                    var filesData = [];
                    var foldersData = [];
                    response.body.d.results.forEach(function (item) {
                        item.metadata = _this.options.metaFields.reduce(function (meta, field) {
                            if (item.hasOwnProperty(field)) {
                                meta[field] = item[field];
                            }
                            return meta;
                        }, {});
                        if (item.FSObjType === 0) {
                            item.ServerRelativeUrl = item.FileRef;
                            filesData.push(item);
                        }
                        else {
                            foldersData.push(item);
                        }
                    });
                    var results = {
                        files: filesData,
                        folders: foldersData
                    };
                    resolve(results);
                })
                    .catch(function (err) {
                    console.log(colors.red.bold('\nError in getContentWithCaml:'), colors.red(err.message));
                    reject(err.message);
                });
            });
        };
        this.downloadAsStream = function (spFilePath, saveFilePath) {
            return new Promise(function (resolve, reject) {
                var restUrl = _this.context.siteUrl + "/_api/Web/GetFileByServerRelativeUrl(@FileServerRelativeUrl)/$value" +
                    ("?@FileServerRelativeUrl='" + _this.utils.escapeURIComponent(spFilePath) + "'");
                var envProcessHeaders = {};
                try {
                    envProcessHeaders = JSON.parse(process.env['_sp_request_headers'] || '{}');
                }
                catch (ex) { }
                node_sp_auth_1.getAuth(_this.context.siteUrl, _this.context.creds)
                    .then(function (auth) {
                    var options = __assign({ url: restUrl, method: 'GET', headers: __assign({}, envProcessHeaders, auth.headers, { 'User-Agent': 'sppull' }), encoding: null, strictSSL: false, gzip: true, agent: _this.utils.isUrlHttps(_this.context.siteUrl) ? _this.agent : undefined }, auth.options);
                    request(options)
                        .pipe(fs.createWriteStream(saveFilePath))
                        .on('error', reject)
                        .on('finish', function () {
                        resolve(saveFilePath);
                    });
                })
                    .catch(reject);
            });
        };
        this.downloadSimple = function (spFilePath, saveFilePath) {
            return new Promise(function (resolve, reject) {
                var restUrl = _this.context.siteUrl + "/_api/Web/GetFileByServerRelativeUrl(@FileServerRelativeUrl)/OpenBinaryStream" +
                    ("?@FileServerRelativeUrl='" + _this.utils.escapeURIComponent(spFilePath) + "'");
                _this.spr.get(restUrl, {
                    encoding: null,
                    agent: _this.utils.isUrlHttps(restUrl) ? _this.agent : undefined
                })
                    .then(function (response) {
                    if (/.json$/.test(saveFilePath)) {
                        response.body = JSON.stringify(response.body, null, 2);
                    }
                    if (/.map$/.test(saveFilePath)) {
                        response.body = JSON.stringify(response.body);
                    }
                    fs.writeFile(saveFilePath, response.body, function (err) {
                        if (err) {
                            return reject(err);
                        }
                        resolve(saveFilePath);
                    });
                })
                    .catch(reject);
            });
        };
        this.needToDownload = function (saveFilePath, metadata) {
            var stats = null;
            var needDownload = true;
            if (typeof metadata !== 'undefined') {
                if (fs.existsSync(saveFilePath)) {
                    stats = fs.statSync(saveFilePath);
                    needDownload = false;
                    if (typeof metadata.Length !== 'undefined') {
                        if (stats.size !== parseInt(metadata.Length + '')) {
                            needDownload = true;
                        }
                    }
                    else {
                        needDownload = true;
                    }
                    if (typeof metadata.TimeLastModified !== 'undefined') {
                        var timeLastModified = new Date(metadata.TimeLastModified);
                        if (stats.mtime < timeLastModified) {
                            needDownload = true;
                        }
                    }
                }
                else {
                    needDownload = true;
                }
            }
            return needDownload;
        };
        this.getCachedRequest = function () {
            return _this.spr || sprequest.create(_this.context.creds);
        };
        this.context = context;
        this.options = __assign({}, options, { dlRootFolder: options.dlRootFolder || '.downloads', metaFields: options.metaFields || [] });
        this.utils = new utils_1.Utils();
        this.agent = new https.Agent({
            rejectUnauthorized: false,
            keepAlive: true,
            keepAliveMsecs: 10000
        });
    }
    return RestAPI;
}());
exports.default = RestAPI;

//# sourceMappingURL=index.js.map
