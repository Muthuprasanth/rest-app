{"version":3,"sources":["api/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport * as https from 'https';\r\nimport * as mkdirp from 'mkdirp';\r\nimport * as colors from 'colors';\r\nimport * as readline from 'readline';\r\nimport * as sprequest from 'sp-request';\r\nimport * as request from 'request';\r\n// tslint:disable-next-line:no-duplicate-imports\r\nimport { OptionsWithUrl } from 'request';\r\nimport { getAuth, IAuthOptions } from 'node-sp-auth';\r\n\r\nimport { Utils } from './../utils';\r\nimport { ISPPullOptions, ISPPullContext, IFileBasicMetadata } from '../interfaces';\r\n\r\nexport default class RestAPI {\r\n\r\n  private context: ISPPullContext;\r\n  private options: ISPPullOptions;\r\n  private spr: sprequest.ISPRequest;\r\n  private agent: https.Agent;\r\n  private utils: Utils;\r\n\r\n  constructor (context: ISPPullContext, options: ISPPullOptions) {\r\n    this.context = context;\r\n    this.options = {\r\n      ...options,\r\n      dlRootFolder: options.dlRootFolder || '.downloads',\r\n      metaFields: options.metaFields || []\r\n    };\r\n    this.utils = new Utils();\r\n    this.agent = new https.Agent({\r\n      rejectUnauthorized: false,\r\n      keepAlive: true,\r\n      keepAliveMsecs: 10000\r\n    });\r\n  }\r\n\r\n  public downloadFile = (spFilePath: string, metadata?: IFileBasicMetadata): Promise<any> => {\r\n    return new Promise((resolve, reject) => {\r\n      this.spr = this.getCachedRequest();\r\n\r\n      let spBaseFolderRegEx = new RegExp(decodeURIComponent(this.options.spBaseFolder), 'gi');\r\n      let spFilePathRelative = decodeURIComponent(spFilePath);\r\n      if (['', '/'].indexOf(this.options.spBaseFolder) === -1) {\r\n        spFilePathRelative = decodeURIComponent(spFilePath).replace(spBaseFolderRegEx, '');\r\n      }\r\n\r\n      let saveFilePath = path.join(this.options.dlRootFolder, spFilePathRelative);\r\n\r\n      if (typeof this.options.omitFolderPath !== 'undefined') {\r\n        let omitFolderPath = path.resolve(this.options.omitFolderPath);\r\n        saveFilePath = path.join(saveFilePath.replace(this.options.omitFolderPath, ''));\r\n      }\r\n\r\n      if (this.needToDownload(saveFilePath, metadata)) {\r\n\r\n        let saveFolderPath = path.dirname(saveFilePath);\r\n\r\n        mkdirp(saveFolderPath, err => {\r\n          if (err) {\r\n            console.log(colors.red.bold('\\nError in operations.downloadFile:'), colors.red(err));\r\n            return reject(err);\r\n          }\r\n\r\n          // ToDo: Check the most effective approach\r\n          // vs:\r\n          //  - memory consumptions\r\n          //  - speed\r\n\r\n          // If a file is greater than 20 MB than use streams\r\n          // tslint:disable-next-line:radix\r\n          let filesize: number = parseInt(metadata.Length + '');\r\n          if (filesize > 20000000) {\r\n\r\n            // console.log('Download using streaming');\r\n\r\n            // Download using streaming\r\n            this.downloadAsStream(spFilePath, saveFilePath)\r\n              .then(() => {\r\n                resolve(saveFilePath);\r\n              })\r\n              .catch(error => {\r\n                console.log(colors.red.bold('\\nError in operations.downloadFile:'), colors.red(err.message));\r\n                reject(error);\r\n              });\r\n\r\n          } else {\r\n\r\n            // console.log('Download simple');\r\n\r\n            // Download using sp-request, without streaming, consumes lots of memory in case of large files\r\n            this.downloadSimple(spFilePath, saveFilePath)\r\n              .then(() => {\r\n                resolve(saveFilePath);\r\n              })\r\n              .catch(error => {\r\n                console.log(colors.red.bold('\\nError in operations.downloadFile:'), colors.red(err.message));\r\n                reject(error);\r\n              });\r\n\r\n          }\r\n\r\n        });\r\n\r\n      } else {\r\n        resolve(saveFilePath);\r\n      }\r\n    });\r\n  }\r\n\r\n  public getFolderContent = (spRootFolder: string): Promise<any> => {\r\n    return new Promise((resolve, reject) => {\r\n      let restUrl: string;\r\n      this.spr = this.getCachedRequest();\r\n\r\n      if (spRootFolder.charAt(spRootFolder.length - 1) === '/') {\r\n        spRootFolder = spRootFolder.substring(0, spRootFolder.length - 1);\r\n      }\r\n\r\n      restUrl = this.utils.trimMultiline(`\r\n        ${this.context.siteUrl}/_api/Web/GetFolderByServerRelativeUrl(@FolderServerRelativeUrl)\r\n          ?$expand=Folders,Files,Folders/ListItemAllFields,Files/ListItemAllFields\r\n          &$select=##MetadataSrt#\r\n            Folders/ListItemAllFields/Id,\r\n            Folders/Name,Folders/UniqueID,Folders/ID,Folders/ItemCount,Folders/ServerRelativeUrl,Folder/TimeCreated,Folder/TimeLastModified,\r\n            Files/Name,Files/UniqueID,Files/ID,Files/ServerRelativeUrl,Files/Length,Files/TimeCreated,Files/TimeLastModified,Files/ModifiedBy\r\n          &@FolderServerRelativeUrl='${this.utils.escapeURIComponent(spRootFolder)}'\r\n      `);\r\n\r\n      let metadataStr: string = this.options.metaFields.map((fieldName) => {\r\n        return 'Files/ListItemAllFields/' + fieldName;\r\n      }).join(',');\r\n\r\n      if (metadataStr.length > 0) {\r\n        metadataStr += ',';\r\n      }\r\n\r\n      restUrl = restUrl.replace(/##MetadataSrt#/g, metadataStr);\r\n\r\n      this.spr.get(restUrl, {\r\n        agent: this.utils.isUrlHttps(restUrl) ? this.agent : undefined\r\n      })\r\n        .then((response: any) => {\r\n          let results = {\r\n            folders: (response.body.d.Folders.results || []).filter((folder) => {\r\n              return typeof folder.ListItemAllFields.Id !== 'undefined';\r\n            }),\r\n            files: (response.body.d.Files.results || []).map((file) => {\r\n              return {\r\n                ...file,\r\n                metadata: this.options.metaFields.reduce((meta, field) => {\r\n                  if (typeof file.ListItemAllFields !== 'undefined') {\r\n                    if (file.ListItemAllFields.hasOwnProperty(field)) {\r\n                      meta[field] = file.ListItemAllFields[field];\r\n                    }\r\n                  }\r\n                  return meta;\r\n                }, {})\r\n              };\r\n            })\r\n          };\r\n          resolve(results);\r\n        })\r\n        .catch((err) => {\r\n          console.log(colors.red.bold('\\nError in getFolderContent:'), colors.red(err.message));\r\n          reject(err.message);\r\n        });\r\n    });\r\n  }\r\n\r\n  public getContentWithCaml = (): Promise<any> => {\r\n    return new Promise((resolve, reject) => {\r\n      this.spr = this.getCachedRequest();\r\n      this.spr.requestDigest(this.context.siteUrl)\r\n        .then((digest) => {\r\n          let restUrl;\r\n          restUrl = this.utils.trimMultiline(`\r\n            ${this.context.siteUrl}/_api/Web/GetList(@DocLibUrl)/GetItems\r\n              ?$select=##MetadataSrt#\r\n                Name,UniqueID,ID,FileDirRef,FileRef,FSObjType,TimeCreated,TimeLastModified,Length,ModifiedBy\r\n              &@DocLibUrl='${this.utils.escapeURIComponent(this.options.spDocLibUrl)}'\r\n          `);\r\n\r\n          let metadataStr: string = this.options.metaFields.map((fieldName) => {\r\n            return `Files/ListItemAllFields/${fieldName}`;\r\n          }).join(',');\r\n\r\n          if (metadataStr.length > 0) {\r\n            metadataStr += ',';\r\n          }\r\n\r\n          restUrl = restUrl.replace(/##MetadataSrt#/g, metadataStr);\r\n\r\n          return this.spr.post(restUrl, {\r\n            body: {\r\n              query: {\r\n                __metadata: {\r\n                  type: 'SP.CamlQuery'\r\n                },\r\n                ViewXml: `<View Scope=\"Recursive\"><Query><Where>${this.options.camlCondition}</Where></Query></View>`\r\n              }\r\n            },\r\n            headers: {\r\n              'X-RequestDigest': digest,\r\n              'Accept': 'application/json; odata=verbose',\r\n              'Content-Type': 'application/json; odata=verbose'\r\n            },\r\n            agent: this.utils.isUrlHttps(restUrl) ? this.agent : undefined\r\n          });\r\n        })\r\n        .then((response) => {\r\n          let filesData = [];\r\n          let foldersData = [];\r\n          response.body.d.results.forEach((item) => {\r\n            item.metadata = this.options.metaFields.reduce((meta, field) => {\r\n              if (item.hasOwnProperty(field)) {\r\n                meta[field] = item[field];\r\n              }\r\n              return meta;\r\n            }, {});\r\n            if (item.FSObjType === 0) {\r\n              item.ServerRelativeUrl = item.FileRef;\r\n              filesData.push(item);\r\n            } else {\r\n              foldersData.push(item);\r\n            }\r\n          });\r\n          let results = {\r\n            files: filesData,\r\n            folders: foldersData\r\n          };\r\n          resolve(results);\r\n        })\r\n        .catch((err) => {\r\n          console.log(colors.red.bold('\\nError in getContentWithCaml:'), colors.red(err.message));\r\n          reject(err.message);\r\n        });\r\n    });\r\n  }\r\n\r\n  private downloadAsStream = (spFilePath: string, saveFilePath: string): Promise<string> => {\r\n    return new Promise((resolve, reject) => {\r\n      let restUrl: string =\r\n        `${this.context.siteUrl}/_api/Web/GetFileByServerRelativeUrl(@FileServerRelativeUrl)/$value` +\r\n        `?@FileServerRelativeUrl='${this.utils.escapeURIComponent(spFilePath)}'`;\r\n\r\n      let envProcessHeaders = {};\r\n      try {\r\n        envProcessHeaders = JSON.parse(process.env['_sp_request_headers'] || '{}');\r\n      // tslint:disable-next-line:no-empty\r\n      } catch (ex) {}\r\n\r\n      getAuth(this.context.siteUrl, this.context.creds)\r\n        .then(auth => {\r\n          let options: OptionsWithUrl = {\r\n            url: restUrl,\r\n            method: 'GET',\r\n            headers: {\r\n              ...envProcessHeaders,\r\n              ...auth.headers,\r\n              'User-Agent': 'sppull'\r\n            },\r\n            encoding: null,\r\n            strictSSL: false,\r\n            gzip: true,\r\n            agent: this.utils.isUrlHttps(this.context.siteUrl) ? this.agent : undefined,\r\n            ...auth.options\r\n          };\r\n          request(options)\r\n            .pipe(fs.createWriteStream(saveFilePath))\r\n            .on('error', reject)\r\n            .on('finish', () => {\r\n              resolve(saveFilePath);\r\n            });\r\n        })\r\n        .catch(reject);\r\n    });\r\n  }\r\n\r\n  private downloadSimple = (spFilePath: string, saveFilePath: string): Promise<string> => {\r\n    return new Promise((resolve, reject) => {\r\n      let restUrl: string =\r\n        `${this.context.siteUrl}/_api/Web/GetFileByServerRelativeUrl(@FileServerRelativeUrl)/OpenBinaryStream` +\r\n        `?@FileServerRelativeUrl='${this.utils.escapeURIComponent(spFilePath)}'`;\r\n\r\n      this.spr.get(restUrl, {\r\n        encoding: null,\r\n        agent: this.utils.isUrlHttps(restUrl) ? this.agent : undefined\r\n      })\r\n        .then((response) => {\r\n          if (/.json$/.test(saveFilePath)) {\r\n            response.body = JSON.stringify(response.body, null, 2);\r\n          }\r\n          if (/.map$/.test(saveFilePath)) {\r\n            response.body = JSON.stringify(response.body);\r\n          }\r\n          fs.writeFile(saveFilePath, response.body, (err) => {\r\n            if (err) {\r\n              return reject(err);\r\n            }\r\n            resolve(saveFilePath);\r\n          });\r\n        })\r\n        .catch(reject);\r\n    });\r\n  }\r\n\r\n  private needToDownload = (saveFilePath: string, metadata?: IFileBasicMetadata): boolean => {\r\n    let stats: fs.Stats = null;\r\n    let needDownload: boolean = true;\r\n\r\n    if (typeof metadata !== 'undefined') {\r\n      if (fs.existsSync(saveFilePath)) {\r\n        stats = fs.statSync(saveFilePath);\r\n        needDownload = false;\r\n        if (typeof metadata.Length !== 'undefined') {\r\n          // tslint:disable-next-line:radix\r\n          if (stats.size !== parseInt(metadata.Length + '')) {\r\n            needDownload = true;\r\n          }\r\n        } else {\r\n          needDownload = true;\r\n        }\r\n        if (typeof metadata.TimeLastModified !== 'undefined') {\r\n          let timeLastModified = new Date(metadata.TimeLastModified);\r\n          if (stats.mtime < timeLastModified) {\r\n            needDownload = true;\r\n          }\r\n        }\r\n      } else {\r\n        needDownload = true;\r\n      }\r\n    }\r\n\r\n    return needDownload;\r\n  }\r\n\r\n  private getCachedRequest = (): sprequest.ISPRequest => {\r\n    return this.spr || sprequest.create(this.context.creds);\r\n  }\r\n\r\n}\r\n"]}