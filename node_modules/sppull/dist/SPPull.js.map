{"version":3,"sources":["SPPull.ts"],"names":[],"mappings":"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","file":"SPPull.js","sourcesContent":["import * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport * as mkdirp from 'mkdirp';\r\nimport * as colors from 'colors';\r\nimport * as readline from 'readline';\r\n\r\nimport RestAPI from './api';\r\nimport { ISPPullOptions, ISPPullContext, IFileBasicMetadata } from './interfaces';\r\n\r\nexport class Download {\r\n\r\n  private context: ISPPullContext;\r\n  private options: ISPPullOptions;\r\n  private restApi: RestAPI;\r\n\r\n  public sppull = (context: ISPPullContext, options: ISPPullOptions): Promise<any> => {\r\n\r\n    this.context = context;\r\n    this.options = options;\r\n\r\n    if (typeof this.context.creds === 'undefined') {\r\n      this.context.creds = {\r\n        ...(this.context as any)\r\n      };\r\n    }\r\n\r\n    this.options.spHostName = this.context.siteUrl\r\n      .replace('http://', '')\r\n      .replace('https://', '')\r\n      .split('/')[0];\r\n\r\n    this.options.spRelativeBase = this.context.siteUrl\r\n      .replace('http://', '')\r\n      .replace('https://', '')\r\n      .replace(this.options.spHostName, '');\r\n\r\n    if (this.options.spRootFolder) {\r\n      if (this.options.spRootFolder.indexOf(this.options.spRelativeBase) !== 0) {\r\n        this.options.spRootFolder = (this.options.spRelativeBase + '/' + this.options.spRootFolder).replace(/\\/\\//g, '/');\r\n      } else {\r\n        if (this.options.spRootFolder.charAt(0) !== '/') {\r\n          this.options.spRootFolder = '/' + this.options.spRootFolder;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.options.spBaseFolder) {\r\n      if (this.options.spBaseFolder.indexOf(this.options.spRelativeBase) !== 0) {\r\n        this.options.spBaseFolder = (this.options.spRelativeBase + '/' + this.options.spBaseFolder).replace(/\\/\\//g, '/');\r\n      }\r\n    } else {\r\n      this.options.spBaseFolder = this.options.spRootFolder;\r\n    }\r\n\r\n    this.options.dlRootFolder = this.options.dlRootFolder || './Downloads';\r\n\r\n    if (typeof this.options.recursive === 'undefined') {\r\n      this.options.recursive = true;\r\n    }\r\n\r\n    if (typeof this.options.foderStructureOnly === 'undefined') {\r\n      this.options.foderStructureOnly = false;\r\n    }\r\n\r\n    if (typeof this.options.createEmptyFolders === 'undefined') {\r\n      this.options.createEmptyFolders = true;\r\n    }\r\n\r\n    if (typeof this.options.metaFields === 'undefined') {\r\n      this.options.metaFields = [];\r\n    }\r\n\r\n    if (typeof this.options.restCondition === 'undefined') {\r\n      this.options.restCondition = '';\r\n    }\r\n\r\n    if (this.options.spDocLibUrl) {\r\n      if (this.options.spDocLibUrl.indexOf(this.options.spRelativeBase) !== 0) {\r\n        this.options.spDocLibUrl = (this.options.spRelativeBase + '/' + this.options.spDocLibUrl).replace(/\\/\\//g, '/');\r\n      } else {\r\n        if (this.options.spDocLibUrl.charAt(0) !== '/') {\r\n          this.options.spDocLibUrl = '/' + this.options.spDocLibUrl;\r\n        }\r\n      }\r\n      this.options.spDocLibUrl = encodeURIComponent(this.options.spDocLibUrl);\r\n    }\r\n\r\n    if (typeof this.options.muteConsole === 'undefined') {\r\n      this.options.muteConsole = false;\r\n    }\r\n\r\n    // Defaults <<<\r\n\r\n    this.restApi = new RestAPI(this.context, this.options);\r\n\r\n    if (\r\n      typeof this.options.camlCondition !== 'undefined' && this.options.camlCondition !== '' &&\r\n      typeof this.options.spDocLibUrl !== 'undefined' && this.options.spDocLibUrl !== ''\r\n    ) {\r\n      return this.runDownloadCamlObjects();\r\n    } else {\r\n      if (typeof this.options.strictObjects !== 'undefined' && Array.isArray([this.options.strictObjects])) {\r\n        this.options.strictObjects.forEach((strictObject, i) => {\r\n          if (typeof strictObject === 'string') {\r\n            if (strictObject.indexOf(this.options.spRootFolder) !== 0) {\r\n              strictObject = (this.options.spRootFolder + '/' + strictObject).replace(/\\/\\//g, '/');\r\n            }\r\n            this.options.strictObjects[i] = strictObject;\r\n          }\r\n        });\r\n        return this.runDownloadStrictObjects();\r\n      } else {\r\n        if (!this.options.foderStructureOnly) {\r\n          if (this.options.recursive) {\r\n            return this.runDownloadFilesRecursively();\r\n          } else {\r\n            return this.runDownloadFilesFlat();\r\n          }\r\n        } else {\r\n          return this.runCreateFoldersRecursively();\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  private createFolder = (spFolderPath: string, spBaseFolder: string, downloadRoot: string): Promise<any> => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let spBaseFolderRegEx = new RegExp(decodeURIComponent(this.options.spBaseFolder), 'gi');\r\n      let spFolderPathRelative = decodeURIComponent(spFolderPath);\r\n      if (['', '/'].indexOf(this.options.spBaseFolder) === -1) {\r\n        spFolderPathRelative = decodeURIComponent(spFolderPath).replace(spBaseFolderRegEx, '');\r\n      }\r\n\r\n      let saveFolderPath: string = path.join(downloadRoot, spFolderPathRelative);\r\n\r\n      mkdirp(saveFolderPath, (err) => {\r\n        if (err) {\r\n          console.log(colors.red.bold('Error creating folder ' + '`' + saveFolderPath + ' `'), colors.red(err));\r\n          reject(err);\r\n        }\r\n        resolve(saveFolderPath);\r\n      });\r\n    });\r\n  }\r\n\r\n  // Queues >>>>\r\n  private createFoldersQueue = (foldersList: any[], index: number = 0): Promise<any> => {\r\n    return new Promise((resolve, reject) => {\r\n      let spFolderPath = foldersList[index].ServerRelativeUrl;\r\n      let spBaseFolder = this.options.spBaseFolder;\r\n      let downloadRoot = this.options.dlRootFolder;\r\n\r\n      if (!this.options.muteConsole) {\r\n        readline.clearLine(process.stdout, 0);\r\n        readline.cursorTo(process.stdout, 0, null);\r\n        process.stdout.write(colors.green.bold('Creating folders: ') + (index + 1) + ' out of ' + foldersList.length);\r\n      }\r\n\r\n      this.createFolder(spFolderPath, spBaseFolder, downloadRoot)\r\n        .then((localFolderPath: string) => {\r\n          foldersList[index].SavedToLocalPath = localFolderPath;\r\n          index += 1;\r\n          if (index < foldersList.length) {\r\n            resolve(this.createFoldersQueue(foldersList, index));\r\n          } else {\r\n            if (!this.options.muteConsole) {\r\n              process.stdout.write('\\n');\r\n            }\r\n            resolve(foldersList);\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  private downloadFilesQueue = (filesList: IFileBasicMetadata[], index: number = 0): Promise<any> => {\r\n    return new Promise((resolve, reject) => {\r\n      let spFilePath = filesList[index].ServerRelativeUrl;\r\n      if (!this.options.muteConsole) {\r\n        readline.clearLine(process.stdout, 0);\r\n        readline.cursorTo(process.stdout, 0, null);\r\n        process.stdout.write(colors.green.bold('Downloading files: ') + (index + 1) + ' out of ' + filesList.length);\r\n      }\r\n      this.restApi.downloadFile(spFilePath, filesList[index])\r\n        .then((localFilePath) => {\r\n          filesList[index].SavedToLocalPath = localFilePath;\r\n          index += 1;\r\n          if (index < filesList.length) {\r\n            resolve(this.downloadFilesQueue(filesList, index));\r\n          } else {\r\n            if (!this.options.muteConsole) {\r\n              process.stdout.write('\\n');\r\n            }\r\n            resolve(filesList);\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  private getStructureRecursive = (root: boolean = true, foldersQueue: any[] = [], filesList: any[] = []): Promise<any> => {\r\n    return new Promise((resolve, reject) => {\r\n      let exitQueue = true;\r\n      if (typeof this.options.spRootFolder === 'undefined' || this.options.spRootFolder === '') {\r\n        reject('The `spRootFolder` property should be provided in options.');\r\n      }\r\n      let spRootFolder;\r\n\r\n      if (foldersQueue.length === 0) {\r\n        spRootFolder = this.options.spRootFolder;\r\n        exitQueue = !root; // false;\r\n      } else {\r\n        foldersQueue.some((fi) => {\r\n          if (typeof fi.processed === 'undefined') {\r\n            fi.processed = false;\r\n          }\r\n          if (!fi.processed) {\r\n            spRootFolder = fi.serverRelativeUrl;\r\n            fi.processed = true;\r\n            exitQueue = false;\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n      }\r\n\r\n      if (!exitQueue) {\r\n        let cntInQueue = 0;\r\n        foldersQueue.forEach((folder) => {\r\n          if (folder.processed) {\r\n            cntInQueue += 1;\r\n          }\r\n        });\r\n\r\n        if (!this.options.muteConsole) {\r\n          readline.clearLine(process.stdout, 0);\r\n          readline.cursorTo(process.stdout, 0, null);\r\n          process.stdout.write(colors.green.bold('Folders proceeding: ') + cntInQueue + ' out of ' + foldersQueue.length + colors.gray(' [recursive scanning...]'));\r\n        }\r\n\r\n        this.restApi.getFolderContent(spRootFolder)\r\n          .then((results) => {\r\n            (results.folders || []).forEach((folder) => {\r\n              let folderElement = {\r\n                folder: folder,\r\n                serverRelativeUrl: folder.ServerRelativeUrl,\r\n                processed: false\r\n              };\r\n              foldersQueue.push(folderElement);\r\n            });\r\n            filesList = filesList.concat(results.files || []);\r\n            resolve(this.getStructureRecursive(false, foldersQueue, filesList));\r\n          });\r\n\r\n      } else {\r\n        if (!this.options.muteConsole) {\r\n          process.stdout.write('\\n');\r\n        }\r\n        let foldersList = foldersQueue.map((folder) => {\r\n          return folder.folder;\r\n        });\r\n        resolve({\r\n          files: filesList,\r\n          folders: foldersList\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  // <<<< Queues\r\n\r\n  // Runners >>>>\r\n  private runCreateFoldersRecursively = (): Promise<any> => {\r\n    return new Promise((resolve, reject) => {\r\n      return this.getStructureRecursive()\r\n        .then((data) => {\r\n          if ((data.folders || []).length > 0) {\r\n            resolve(this.createFoldersQueue(data.folders, 0));\r\n          } else {\r\n            resolve([]);\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  private downloadMyFilesHandler = (data): Promise<any> => {\r\n    return new Promise((resolve, reject) => {\r\n      if ((data.files || []).length > 0) {\r\n        resolve(this.downloadFilesQueue(data.files, 0));\r\n      } else {\r\n        resolve([]);\r\n      }\r\n    });\r\n  }\r\n\r\n  private runDownloadFilesRecursively (): Promise<any> {\r\n    return this.getStructureRecursive()\r\n      .then((data) => {\r\n        if (this.options.createEmptyFolders) {\r\n          if ((data.folders || []).length > 0) {\r\n            return this.createFoldersQueue(data.folders, 0)\r\n              .then(() => {\r\n                return this.downloadMyFilesHandler(data);\r\n              });\r\n          } else {\r\n            return this.downloadMyFilesHandler(data);\r\n          }\r\n        } else {\r\n          return this.downloadMyFilesHandler(data);\r\n        }\r\n      });\r\n  }\r\n\r\n  private runDownloadFilesFlat = (): Promise<any> => {\r\n    if (typeof this.options.spRootFolder === 'undefined' || this.options.spRootFolder === '') {\r\n      throw new Error('The `spRootFolder` property should be provided in options.');\r\n    }\r\n    return this.restApi.getFolderContent(this.options.spRootFolder)\r\n      .then((data) => {\r\n        if (this.options.createEmptyFolders) {\r\n          if ((data.folders || []).length > 0) {\r\n            return this.createFoldersQueue(data.folders, 0)\r\n              .then(() => {\r\n                return this.downloadMyFilesHandler(data);\r\n              });\r\n          } else {\r\n            return this.downloadMyFilesHandler(data);\r\n          }\r\n        } else {\r\n          return this.downloadMyFilesHandler(data);\r\n        }\r\n      });\r\n  }\r\n\r\n  private runDownloadStrictObjects = (): Promise<any> => {\r\n    return new Promise((resolve, reject) => {\r\n      let filesList: IFileBasicMetadata[] = this.options.strictObjects.filter((d) => {\r\n        let pathArr = d.split('/');\r\n        return pathArr[pathArr.length - 1].indexOf('.') !== -1;\r\n      }).map((d) => {\r\n        return {\r\n          ServerRelativeUrl: d\r\n        };\r\n      });\r\n      if (filesList.length > 0) {\r\n        resolve(this.downloadFilesQueue(filesList, 0));\r\n      } else {\r\n        resolve([]);\r\n      }\r\n    });\r\n  }\r\n\r\n  private runDownloadCamlObjects = (): Promise<any> => {\r\n    return this.restApi.getContentWithCaml()\r\n      .then((data) => {\r\n        if (this.options.createEmptyFolders) {\r\n          if ((data.folders || []).length > 0) {\r\n            return this.createFoldersQueue(data.folders, 0)\r\n              .then(() => {\r\n                return this.downloadMyFilesHandler(data);\r\n              });\r\n          } else {\r\n            return this.downloadMyFilesHandler(data);\r\n          }\r\n        } else {\r\n          return this.downloadMyFilesHandler(data);\r\n        }\r\n      });\r\n  }\r\n\r\n  // <<<< Runners\r\n\r\n}\r\n\r\nexport { ISPPullOptions, ISPPullContext } from './interfaces';\r\n"]}